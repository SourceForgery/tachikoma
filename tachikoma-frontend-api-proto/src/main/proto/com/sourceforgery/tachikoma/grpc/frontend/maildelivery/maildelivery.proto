syntax = "proto3";

option java_multiple_files = true;
option go_package = "github.com/SourceForgery/tachikoma";

package com.sourceforgery.tachikoma.grpc.frontend.maildelivery;

import "com/sourceforgery/tachikoma/grpc/frontend/common.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

service MailDeliveryService {
    // Send emails. This will always succeed unless spam marked.
    // Failures can only be detected via DeliveryNotificationService.notificationStream()
    rpc SendEmail (OutgoingEmail) returns (stream EmailQueueStatus);
    // Unfortunately, e.g. Cloudflare does not support streaming responses where the server closes the connection.
    rpc SendEmailUnary (OutgoingEmail) returns (EmailQueueStatusList);

    // This method works the same as StreamIncomingEmails, but is not configurable
    rpc GetIncomingEmails (google.protobuf.Empty) returns (stream IncomingEmail) {
        option deprecated = true;
    };

    rpc StreamIncomingEmailsWithKeepAlive (IncomingEmailParameters) returns (stream IncomingEmailOrKeepAlive);
    rpc StreamIncomingEmails (IncomingEmailParameters) returns (stream IncomingEmail);

    rpc GetIncomingEmail (GetIncomingEmailRequest) returns (IncomingEmail);

    rpc SearchIncomingEmails (SearchIncomingEmailsRequest) returns (stream IncomingEmail);
    // Unfortunately, e.g. Cloudflare does not support streaming responses where the server closes the connection.
    rpc SearchIncomingEmailsUnary (SearchIncomingEmailsRequest) returns (IncomingEmailList);
}

// A recipient
message EmailRecipient {
    // Recipient email with name
    NamedEmailAddress named_email = 101;

    // Template variables (if using a template)
    google.protobuf.Struct template_vars = 102;

    // Optional
    // Metadata variables. These are sent back with callbacks.
    // These overwrite the email metadata on conflicting keys
    map<string, string> metadata = 103;
}

// Tracking data structure for a email transaction
message TrackingData {
    // Special domain used to track links. Used instead of the normal host.
    // See future documentation on how to set up with e.g. nginx/apache httpd/lighttpd which
    // is necessary for HSTS domains.
    string tracking_domain = 101;

    // Not sent, but used in search and in callbacks
    repeated string tags = 102;

    // Data for e.g. callback processing
    map<string, string> metadata = 103;
}

// When sending with template
message TemplateBody {
    // Which templating enging to use
    TemplateEngine templating_engine = 101;

    // Subject template
    string subject = 102;

    // Optional (required if plaintextTemplate is not set but both are ok)
    // This template will generate the html body
    string html_template = 201;

    // Optional (required if htmlTemplate is not set but both are ok)
    // This template will generate the plaintext body
    string plaintext_template = 202;

    // Optional
    // Variables available in the template. Will only be used as defaults for the recipient ones
    google.protobuf.Struct global_vars = 301;
}

enum TemplateEngine {
    INVALID = 0;
    HANDLEBARS = 1;
    MUSTASCH = 2;
    RYTHM = 3;
    // PEBBLE = 4; // Insecure?
    // VELOCITY = 5; // Insecure!
    // THYMELEAF = 6; // Insecure?
}

message StaticBody {
    // Optional (required if plaintextBody is not set)
    // The html body to use
    string html_body = 101;

    // The plain text body to use
    // Optional (required if htmlBody is not set)
    string plaintext_body = 102;

    // The subject of the email
    string subject = 103;
}

// Attachments
message RelatedAttachment {
    // The data of the attachment
    bytes data = 101;
    // The content type of the attachment
    string content_type = 102;
    // The content id of the attachment. Use e.g.
    // <img src="cid:CONTENT_ID"> to reference the attachment in
    // the html.
    string content_id = 103;

    // Optional
    // The filename (if any) for this attachment
    string file_name = 104;
}

message OutgoingEmail {
    // Recipients of the email
    repeated EmailRecipient recipients = 101;

    // Optional
    // Blind CC of ALL emails for debugging. These will get one email per recipient.
    // NB! Opening mail / clicking links will be tracked on original email
    repeated EmailAddress bcc = 102;

    // From address
    NamedEmailAddress from = 103;

    // Optional
    // Reply-to email, must have same domain as from email
    EmailAddress reply_to = 104;

    // Optional - defaults to UTC
    // Valid (recommended even) is to use e.g.
    // "America/New_York" or "Europe/Moscow"
    // but anything accepted by
    // Java's ZoneId.of(String) is valid, e.g. "Z", "UTC+1"
    string time_zone = 105;

    // Choose one of
    oneof body {
        // All emails will be identical except for the recipient
        StaticBody static = 201;
        // All emails will be using this template to generate the bodies
        TemplateBody template = 202;
    }

    // Optional
    // Extra email headers sent as is
    map<string, string> headers = 301;

    // Optional
    // Structure for setting up tracking
    TrackingData tracking_data = 302;

    // Optional
    // For delayed sending
    google.protobuf.Timestamp send_at = 304;

    // Optional
    // Used for DKIM signing emails
    string signing_domain = 305;

    // Optional
    // Attached to email
    repeated Attachment attachments = 401;

    // Optional
    // Attached as related parts to the html body.
    // These are usually images shown when displaying the html body.
    repeated RelatedAttachment related_attachments = 402;

    // Optional
    // Unsubscribe redirect URI
    // User is redirected to this when unsubscribe is clicked
    string unsubscribe_redirect_uri = 501;

    // Default false
    // Inline all css from <style> tags on the html elements
    bool inline_css = 601;
}

message EmailQueueStatusList {
    repeated EmailQueueStatus list = 1;
}

// Every email sent will generate one or more of these
// representing the status of delivering to outgoing email server
message EmailQueueStatus {
    // The recipient of this email
    EmailAddress recipient = 101;

    // Only exists if DeliveryStatus is NOT rejected
    EmailId email_id = 103;

    // The transaction the
    EmailTransactionId transaction_id = 104;

    // Possible outcomes of the attempt to queue
    oneof deliveryStatus {
        // Rejected outright because recipient email is blocked
        Rejected rejected = 301;
        // Message will be sent to outgoing SMTP server asap.
        // This can happen if either sendAt is set or too many emails have been sent
        // during a short interval.
        // Message will be sent to outgoing SMTP server at a certain time (+/- 1 minute)
        Queued queued = 302;
        Scheduled scheduled = 303;
    }

}

// Message was rejected outright with this reason
message Rejected {
    // Free text description on why the email wasn't queued
    string rejection_reason = 101;

    // What this combination of recipient email and
    // the enumerated reason of why the email was rejected (if it was)
    RejectReason reject_reason = 201;
    enum RejectReason {
        // Some reason not known. Hints may be available in rejectionReason
        UNKNOWN = 0;
        // Recipient has marked sender email as spam.
        // Please note that only this particular recipient+sender pair is blocked
        SPAM_MARKED = 1;
        // Recipient has unsubscribed.
        // Please note that only this particular recipient+sender pair is blocked
        UNSUBSCRIBED = 2;
    }
}

// Message is queued for send asap
message Queued {
}

// Message was delayed. This is when the message will be sent
message Scheduled {
    // When the message is scheduled to be sent
    google.protobuf.Timestamp scheduled_to = 101;
}

message HeaderLine {
    string name = 1;
    string body = 2;
}

// Attachments
message IncomingEmailAttachment {
    // The data of the attachment
    oneof data {
        bytes data_bytes = 1;
        string data_string = 2;
    };
    // The content type of the attachment
    string content_type = 10;

    repeated HeaderLine headers = 11;

    // Optional
    // The filename (if any) for this attachment
    string file_name = 12;
}

message IncomingEmailList {
    repeated IncomingEmail list = 1;
}

// IncomingEmail is an email that is sent to the mail server
message IncomingEmail {
    IncomingEmailId incoming_email_id = 101;

    NamedEmailAddress mail_from_old = 201 [deprecated = true];
    NamedEmailAddress recipient_to_old = 202 [deprecated = true];
    // Subject of the email
    string subject = 203;
    // The From address in the headers
    repeated NamedEmailAddress from = 204;
    // The To address in the headers. Only useful for sending, debugging and
    // possibly spam detection. Look at recipient_to for everything else.
    repeated NamedEmailAddress to = 205;
    // The Reply-To in the headers
    repeated NamedEmailAddress reply_to = 206;
    // MAIL FROM address. This is the previous email address that the email
    // passed through, e.g. forwarding email or mailing list
    EmailAddress mail_from = 207;
    // RCPT TO To address. This is the email address that
    // the last server tried. This is most likely what you want
    // to look at when deciding where the email is supposed to go.
    EmailAddress recipient_to = 208;

    // Optional. It must be explicitly requested.
    // This is the header (including the smtp envelope, but excluding body/attachments)
    repeated HeaderLine message_header = 301;

    // Optional. It must be explicitly requested.
    // This is the first text/plain attachment or the de-htmlized html body
    string message_text_body = 302;

    // Optional. It must be explicitly requested.
    // This is the first text/html attachment
    string message_html_body = 303;

    // Optional. It must be explicitly requested.
    // This is the whole envelope including the contents.
    bytes message_whole_envelope = 304;

    // Optional. It must be explicitly requested.
    // These are all the attachments without exceptions
    repeated IncomingEmailAttachment message_attachments = 305;

    // Optional. It must be explicitly requested.
    // This is a best effort attempt at removing everything but
    // the latest reply in an email reply-chain. Ie remove
    // everything below the reply-to. This is not an exact science
    // and very prone to problems with different languages and unusual
    // email clients.
    string extracted_text_message_from_reply_chain = 306;
}

message IncomingEmailOrKeepAlive {
    oneof email_or_keep_alive {
        IncomingEmail incoming_email = 1;
        string keep_alive = 2;
    }
}

message IncomingEmailParameters {
    // Includes message_header in replies
    bool include_message_header = 1;
    // Includes message_text_body and message_html_body in replies
    bool include_message_parsed_bodies = 2;
    // Includes message_whole_envelope in replies
    bool include_message_whole_envelope = 3;
    // Includes message_attachments in replies
    bool include_message_attachments = 4;
    // Includes extracted_message_from_reply_chain in replies
    bool include_extracted_message_from_reply_chain = 5;
}

message GetIncomingEmailRequest {
    IncomingEmailId incoming_email_id = 1;
    IncomingEmailParameters parameters = 2;
}

message TimeSpan {
    google.protobuf.Timestamp after = 1;
    google.protobuf.Timestamp before = 2;
}

message EmailSearchFilter {
    oneof filter {
        string contains_subject = 1;
        string contains_sender_name = 2;
        string contains_sender_email = 3;
        string contains_receiver_name = 4;
        string contains_receiver_email = 5;
        TimeSpan received_within = 6;
    }
}

message SearchIncomingEmailsRequest {
    repeated EmailSearchFilter message_filter = 1;
    IncomingEmailParameters parameters = 2;
}
