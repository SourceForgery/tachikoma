apply plugin: 'com.moowork.node'
apply plugin: 'de.richsource.gradle.plugins.typescript'
apply plugin: 'base'

import com.moowork.gradle.node.NodeExtension
import com.moowork.gradle.node.variant.VariantBuilder

node {
    download = true
    version = '9.4.0'
    npmVersion = '5.6.0'
}

def protobufDir = file("$buildDir/proto/")
configurations {
    protobuf
}

String nodeExecutable() {
    NodeExtension nodeExt = NodeExtension.get(project)
    return new VariantBuilder(nodeExt).build().nodeExec
}

compileTypeScript {
    sourcemap = true
    source = [file("src/main/ts"), protobufDir]
    compilerExecutable "${nodeExecutable()} node_modules/typescript/lib/tsc.js"
    dependsOn "npmInstall"
}

dependencies {
    protobuf project(':tachikoma-backend-api-proto')
}


idea {
    module {
        sourceDirs += protobufDir
        outputDir = file('build/idea-out')
        outputDir = file('build/idea-testout')
    }
}


task copyProtobufFiles([type: Sync]) {
    configurations.protobuf.each {
        from(zipTree(it)) {
            include '**/*.proto'
            exclude 'META-INF/**'
        }
    }
    includeEmptyDirs = false
    into protobufDir
}

task buildProtoJs([type: NodeTask]) {
    script = file('./node_modules/protobufjs/cli/bin/pbjs')
    def arguments = [
            '-t', 'static-module',
            '-w', 'commonjs',
            '-o', "$protobufDir/mtagrpc.js",
            '--name', 'mtagrpc',
            '-p', protobufDir,
            '--es6',
            '--force-long'
    ]
    args = arguments
    fileTree(protobufDir)
            .include('**/*.proto')
            .collect()
            .sort()
            .each { addArgs(it) }
}

task buildProtoTs(type: NodeTask) {
    script = file('./node_modules/protobufjs/cli/bin/pbts')
    args = [
            '--name', 'mtagrpc',
            '--out', "$protobufDir/mtagrpc.d.ts",
            "$protobufDir/mtagrpc.js",
    ]
}



assemble.dependsOn compileTypeScript
buildProtoJs.dependsOn copyProtobufFiles
buildProtoTs.dependsOn buildProtoJs
compileTypeScript.dependsOn buildProtoTs